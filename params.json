{"name":"Lexeduct","tagline":"Experimental framework for text-processing pipelines in JS (node or browser)","body":"Lexeduct\r\n========\r\n\r\n**Lexeduct** is an experimental framework for text-processing pipelines, written\r\nin Javascript, usable in both node and in the browser (knock on wood.)\r\n\r\nIt is currently at a *what is this I don't even* stage of development.  The\r\nframework and usage and everything is subject to change without notice.\r\n\r\nBeing a framework, Lexeduct inevitably handles some use cases well, and other\r\nuse cases poorly.  Don't expect too much from it.  More details here soon.\r\n\r\nThe name \"Lexeduct\" is in analogy with \"aqueduct\": conduits for words intead\r\nof water.\r\n\r\nBasic Usage\r\n-----------\r\n\r\nThe main tool is `lexeduct.js`.  You can `cd` into the `src` directory and run\r\nit as `./lexeduct.js`, or you can put the `src` directory on your executable\r\nsearch path (e.g. `export PATH=$PATH:/path/to/lexeduct/src`) and run it as\r\n`lexeduct.js` from anywhere on your system.  (YMMV on Windows.)\r\n\r\nThe basic usage is\r\n\r\n    lexeduct.js {param=value|transformer-name}\r\n\r\nSo, for example,\r\n\r\n    $ echo 'Hello!' | lexeduct.js upper\r\n    HELLO\r\n\r\nParameters can be given with the syntax `name=value` before the name of the\r\ntransformer they are to be applied to.  So, for example,\r\n\r\n    $ echo 'Hello' | lexeduct.js chars=e remove-chars\r\n    Hllo\r\n\r\nYou can of course use shell pipelines to compose transformers:\r\n\r\n    $ echo 'Hello!' | lexeduct.js upper | lexeduct.js 'chars= ' insert-chars\r\n    H E L L O !\r\n\r\n*Or* you can name multiple transformers on `lexeduct.js`'s command line to\r\ncompose them:\r\n\r\n    $ echo 'Hello!' | lexeduct.js upper 'chars= ' insert-chars\r\n    H E L L O !\r\n\r\nMultiple transformers are applied left-to-right.\r\n\r\n    $ echo 'Hello!' | lexeduct.js 'chars=a' insert-chars upper\r\n    HAEALALAOA!A\r\n\r\n    $ echo 'Hello!' | lexeduct.js upper 'chars=a' insert-chars\r\n    HaEaLaLaOa!a\r\n\r\nTransformers\r\n------------\r\n\r\nThe idea is that this repository will eventually contain a giant catalogue\r\nof possible text transformers that can be composed.  Or at least, more than\r\nare presently included.\r\n\r\nEach transformer is in a seperate Javascript file in the `src/transformers`\r\ndirectory which exports, node-style, a single function called `makeTransformer`\r\nwhich takes a configuration object and returns a transformer function.  The\r\ntransformer function takes two arguments: the current string to process, and\r\n(optionally) an object which can be used to store ancillary state.  Every\r\ntransformer function should return either a string, or null (not yet supported),\r\nor an array of strings (not yet supported.)\r\n\r\nAs a simple example, here is the source of the `upper` transformer, found\r\nin `src/transformers/upper.js`:\r\n\r\n    module.exports = {\r\n        makeTransformer: function(cfg) {\r\n            return function(str, state) {\r\n                return str.toUpperCase();\r\n            };\r\n        }\r\n    };\r\n\r\n`state` is an object whose members may be read or written to store ancillary\r\nstate.  (Doing so will make it an 'impure' pipeline.)\r\n\r\nIn-Browser Version\r\n------------------\r\n\r\nRun `./make.sh` from this directory (or the commands it contains) to generate\r\na Javascript file which contains all the available transformers in a format\r\nsuitable for loading in an HTML document.\r\n\r\nOpen `demo/lexeduct.html` in your browser.  It provides a UI for composing\r\nthese transformers and applying them to text provided in a textarea.\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nLexeduct was partly inspired by, and is partly a product of parallel evolution\r\nresembling, [Michael Paulukonis][]'s [TextMunger][].  It is also indebted to\r\nvarious and sundry discussion with him and others on the\r\n[GenerativeText Forum][].\r\n\r\nTODO\r\n----\r\n\r\n*   Allow filters to do something at the very end, maybe.\r\n*   Allow filters return multiple, or no, strings.\r\n*   Many, many other things.\r\n\r\n### In-browser UI ###\r\n\r\n*   Dynamically allocate the number of transformer-slots.\r\n*   Provide \"insert\" and \"delete\" operations on each transformer-slot.\r\n*   Display the description for each select transformer, in a tooltip(?)\r\n*   Create prompts for available params dynamically in each transformer-slot.\r\n\r\n[Michael Paulukonis]:   https://github.com/MichaelPaulukonis/\r\n[TextMunger]:           https://github.com/MichaelPaulukonis/text-munger\r\n[GenerativeText Forum]: https://groups.google.com/forum/#!forum/generativetext\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}